# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *
from buildbot.www import *

secrets = {}
for line in open("/secrets", "r"):
    if line.strip()[0] == "#":
        continue
    key, value = line.split("=")
    secrets[key.lower()] = value.strip()

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("buildbot-docker", secrets["workerpass"])]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

c['change_source'] = [
#    changes.GitPoller('https://github.com/andrewjw/site', workdir='site-workdir', pollinterval=6000, project='andrewjw/site'),
]

####### SCHEDULERS

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(project='andrewjw/site'),
                            treeStableTimer=None,
                            builderNames=["site"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="zyxelprometheus",
                            change_filter=util.ChangeFilter(project='andrewjw/zyxelprometheus'),
                            treeStableTimer=None,
                            builderNames=["zyxelprometheus"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="glowprom",
                            change_filter=util.ChangeFilter(project='andrewjw/glowprom'),
                            treeStableTimer=None,
                            builderNames=["glowprom"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="prom433",
                            change_filter=util.ChangeFilter(project='andrewjw/prom433'),
                            treeStableTimer=None,
                            builderNames=["prom433"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
env={"GEM_HOME":"/home/buildbot/.gem/ruby/2.7.0"}
factory.addStep(steps.Git(repourl='git@github.com:andrewjw/site', mode='incremental'))
factory.addStep(steps.ShellCommand(command=["bash", "./buildbot.sh"], env=env))

glowfactory = util.BuildFactory()
glow_env={"PATH":"/home/buildbot/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
glowfactory.addStep(steps.Git(repourl='git@github.com:andrewjw/glowprom.git', mode='incremental'))
glowfactory.addStep(steps.ShellCommand(command=["bash", "./buildbot.sh"], env=glow_env))

zyxelfactory = util.BuildFactory()
zyxel_env={"PATH":"/home/buildbot/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
zyxelfactory.addStep(steps.Git(repourl='git@github.com:andrewjw/zyxelprometheus', mode='incremental'))
zyxelfactory.addStep(steps.ShellCommand(command=["bash", "./buildbot.sh"], env=zyxel_env))

prom433factory = util.BuildFactory()
prom433factory.addStep(steps.Git(repourl='git@github.com:andrewjw/prom433', mode='incremental'))
prom433factory.addStep(steps.ShellCommand(command=["bash", "./buildbot.sh"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="site",
      workernames=["buildbot-docker"],
      factory=factory))
c['builders'].append(
    util.BuilderConfig(name="zyxelprometheus",
      workernames=["buildbot-docker"],
      factory=zyxelfactory))
c['builders'].append(
    util.BuilderConfig(name="glowprom",
      workernames=["buildbot-docker"],
      factory=glowfactory))
c['builders'].append(
    util.BuilderConfig(name="prom433",
      workernames=["buildbot-docker"],
      factory=prom433factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

context = util.Interpolate("buildbot/%(prop:buildername)s")
gs = reporters.GitHubStatusPush(token=secrets["github_api"],
                                context=context,
                                startDescription='Build started.',
                                endDescription='Build done.')
m = reporters.MailNotifier(fromaddr="buildbot@home.indiegigs.co.uk",
                           extraRecipients=["andrewjwilkinson@gmail.com"],
                           sendToInterestedUsers=False,
                           relayhost="smtp.gmail.com", useTls=True,
                           smtpUser="andrewjwilkinson",
                           smtpPassword=secrets["gmail"])

c['services'] = [gs, m]

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Andrew's Buildbot"
c['titleURL'] = "http://buildbot/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(
    auth=auth.NoAuth(),
    port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
    plugins=dict(waterfall_view={}, console_view={}),
    change_hook_dialects={
                          'base': True,
                          'github': {'secret':'uIQZ&3Llgs3*cRJr'}
    })

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///db/state.sqlite',
}
